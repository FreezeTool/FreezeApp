plugins {
    id("com.android.application")
    id 'replace-plugin'
}

android {
    namespace 'com.john.freezeapp'
    compileSdk 36

    defaultConfig {
        applicationId "com.john.freezeapp"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=none'
            }
        }
        ndk {
            abiFilters "arm64-v8a"
        }
        buildConfigField 'String', 'DAEMON_CLASS_NAME', '\"com.john.freezeapp.daemon.Daemon\"'
    }

    signingConfigs {
        sky {
            storeFile file("${rootDir}/keyStore/demo.jks")
            storePassword 'song123'
            keyAlias 'demo'
            keyPassword 'song123'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sky
        }
        debug {
            signingConfig signingConfigs.sky
        }
    }



    buildFeatures {
        buildConfig true
        prefab true
    }

    lintOptions {
        checkReleaseBuilds false
        // 或者禁用所有警告
        checkAllWarnings false
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation libs.appcompat
    implementation libs.gson
    implementation libs.recyclerview
    implementation libs.material
    implementation libs.shisuku.api
    implementation libs.shisuku.provider
    implementation libs.hiddenapibypass
    implementation libs.wheelpicker
    implementation libs.bcpkix.jdk15on
    implementation libs.boringssl
    implementation libs.cxx
    annotationProcessor project(':hidden-api-processor')
    compileOnly project(':hidden-api-stub')
    implementation project(':hidden-api-annotation')
    implementation project(':common')
    implementation project(':daemon')
}

android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def mergeAssetsTask = tasks.named("merge${variantName}Assets").get()
    def compressAssetsTask = tasks.named("compress${variantName}Assets").get()

    
//    // 创建复制 daemon.apk 的任务
//    task("copyDaemonApk${variantName}", type: Copy) {
//        from new File(project(':daemon').buildDir, "outputs/apk/debug/daemon-debug.apk")
//        into mergeAssetsTask.outputs.files.singleFile
//        rename { String fileName -> 'daemon.apk' }
//
//        // 关闭增量构建
//        outputs.upToDateWhen { false }
//    }
    
    task("write${variantName}AssetsFile") {
        // 定义输入：依赖对应 variant 的 mergeAssets 输出
        inputs.files(mergeAssetsTask.outputs.files)
        
        doLast {
            // 从 inputs 中获取输出目录
            def assetsDir = inputs.files.singleFile
            if (!assetsDir.exists()) {
                assetsDir.mkdirs()
            }
            // 在 inputs 目录下生成 version.txt
            def versionFile = new File(assetsDir, "version.txt")
            versionFile.text = System.currentTimeMillis().toString()
        }
    }

//    def copyDaemonApkTask = tasks.named("copyDaemonApk${variantName}").get()
    def writeAssetsFileTask = tasks.named("write${variantName}AssetsFile").get()
    
    // 设置任务依赖关系
    compressAssetsTask.dependsOn writeAssetsFileTask
//    compressAssetsTask.dependsOn copyDaemonApkTask
    writeAssetsFileTask.dependsOn mergeAssetsTask
//    copyDaemonApkTask.dependsOn writeAssetsFileTask
}